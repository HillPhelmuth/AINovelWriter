@page "/concept"
@attribute [Authorize]
@using AINovelWriter.Shared.Models.Enums
@inherits AppComponentBase

@if (IsBusy)
{
    <BusyOverlay Message="@_busyText"></BusyOverlay>
}
<RadzenRow>
    <RadzenColumn SizeLG="10" OffsetLG="1" Size="12" Style="overflow:auto">
        <RadzenText Text="Provide some story details to generate an outline" TextAlign="TextAlign.Center" TextStyle="TextStyle.H6"></RadzenText>
        @*  <RadzenButton IsBusy="_isBusy" BusyText="Fine, generating idea..." @ref="_button" Size="ButtonSize.ExtraSmall" Text="Ugh, even this is too much work!" Click="@(args => _popup.ToggleAsync(_button.Element))" /> *@
        <Popup @ref="_popup" Lazy="false" Style="display:none;position:absolute;height:300px;width:700px;padding:5px;border:var(--rz-panel-border);background-color:var(--rz-panel-background-color);right:10vw">
            <RadzenText Text="Okay, we'll generate it for you. Just pick a genre" TextAlign="TextAlign.Center" TextStyle="TextStyle.Subtitle1"></RadzenText>
            <RadzenTemplateForm Data="_novelIdeaForm" TItem="NovelIdeaForm" Submit="SubmitIdea">
                <RadzenRow>

                    <RadzenColumn SizeLG="6">
                        <RadzenFormField Text="Genre" Style="width:100%">
                            <ChildContent>
                                <RadzenDropDown Style="width:100%" Data="GenreConverter.ToCategoryItems()" TValue="GenreCategoryItem" @bind-Value="_novelIdeaForm.NovelCategory">
                                    <Template Context="category">
                                        <RadzenText TextStyle="TextStyle.Subtitle2">@category.Name</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@category.Description</RadzenText>
                                    </Template>
                                </RadzenDropDown>
                            </ChildContent>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Caption" Text="Select a genre to generate an idea"></RadzenText>
                            </Helper>
                        </RadzenFormField><br />
                    </RadzenColumn>
                    <RadzenColumn SizeLG="6">
                        @if (_novelIdeaForm.NovelCategory != null)
                        {
                            <RadzenFormField Text="SubGenre" Style="width:100%">
                                <ChildContent>
                                    <RadzenDropDown Style="width:100%" Name="SubGenre" Data="@(_novelIdeaForm.NovelCategory.Genres)" @bind-Value="@_novelIdeaForm.SubGenres" Multiple="true">
                                        <Template Context="category">
                                            <RadzenText TextStyle="TextStyle.Subtitle2">@category.Name</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body2">@category.Description</RadzenText>
                                        </Template>
                                    </RadzenDropDown>
                                </ChildContent>
                                <Helper>
                                    <RadzenRequiredValidator Component="SubGenre" Text="Select a sub-genre!"></RadzenRequiredValidator>
                                </Helper>
                            </RadzenFormField>

                            <br />
                        }
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Add Genres"></RadzenButton>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenTemplateForm>
        </Popup>
        <RadzenTemplateForm TItem="NovelConcepts" Data="AppState.NovelConcepts" Submit="CreateOutline">
            <div style="display:flex;gap:.5rem">
                <RadzenFormField Text="Tone" Style="width:15%">
                    <ChildContent>
                        <RadzenDropDown Name="Tone" TValue="NovelTone" Data="@(Enum.GetValues<NovelTone>())" @bind-Value="AppState.NovelConcepts.Tone">
                            <Template Context="tone">
                                <RadzenText TextStyle="TextStyle.Body2" Text="@(tone.ToString())" title="@(EnumHelpers.GetDescription(tone))"></RadzenText>
                                @*  <RadzenText TextStyle="TextStyle.Caption" Text="@(EnumHelpers.GetDescription(tone))"></RadzenText>
                                <Line></Line> *@
                            </Template>
                        </RadzenDropDown>
                    </ChildContent>
                    <Helper>
                        <RadzenCompareValidator Operator="CompareOperator.NotEqual" Value="@NovelTone.None" Component="Tone" Text="Please select a tone" Popup="true" Style="position:absolute"></RadzenCompareValidator>
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Audience" @ref="_formField" Style="width:15%">
                    <ChildContent>
                        <RadzenDropDown Name="Audience" TValue="NovelAudience" Data="@(Enum.GetValues<NovelAudience>())" @bind-Value="AppState.NovelConcepts.Audience">
                            <Template Context="audience">
                                <RadzenText TextStyle="TextStyle.Body2" Text="@(audience.ToString())" title="@(EnumHelpers.GetDescription(audience))"></RadzenText>
                                @* <RadzenText TextStyle="TextStyle.Caption" Text="@(EnumHelpers.GetDescription(audience))"></RadzenText> *@
                            </Template>
                        </RadzenDropDown>
                    </ChildContent>
                    <Helper>
                        <RadzenCompareValidator Operator="CompareOperator.NotEqual" Value="@NovelAudience.None" Component="Audience" Text="Please select an audience" Popup="true" Style="position:absolute"></RadzenCompareValidator>
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Length" Style="width:15%">
                    <ChildContent>
                        <RadzenDropDown Data="@(Enum.GetValues<NovelLength>())" TValue="NovelLength" Name="Length" @bind-Value="AppState.NovelConcepts.Length">
                            <Template Context="length">
                                @* <RadzenText TextStyle="TextStyle.Body2" Text="@(length.ToString())"></RadzenText> *@
                                <RadzenText TextStyle="TextStyle.Body2" Text="@(EnumHelpers.GetDescription(length))"></RadzenText>
                            </Template>
                        </RadzenDropDown>
                    </ChildContent>
                    <Helper>
                        <RadzenCompareValidator Operator="CompareOperator.NotEqual" Value="@NovelLength.None" Component="Length" Text="Please select a novel length" Popup="true" Style="position:absolute"></RadzenCompareValidator>
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Writing Style" Style="width:15%">
                    <ChildContent>
                        <RadzenDropDown Data="@(Enum.GetValues<WritingStyle>())" TValue="WritingStyle" Name="WritingStyle" @bind-Value="AppState.NovelConcepts.WritingStyle">
                            <Template Context="style">
                                <RadzenText TextStyle="TextStyle.Body2" Text="@(style.ToString())" title="@(EnumHelpers.GetDescription(style))"></RadzenText>
                            </Template>
                        </RadzenDropDown>
                    </ChildContent>
                    <Helper>
                        <RadzenCompareValidator Operator="CompareOperator.NotEqual" Value="@WritingStyle.None" Component="WritingStyle" Text="Please select a writing style" Popup="true" Style="position:absolute"></RadzenCompareValidator>
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Narrative Perspective" Style="width:15%">
                    <ChildContent>
                        <RadzenDropDown Data="@(Enum.GetValues<NarrativePerspective>())" TValue="NarrativePerspective" Name="Perspective" @bind-Value="AppState.NovelConcepts.NarrativePerspective">
                            <Template Context="category">
                                <RadzenText TextStyle="TextStyle.Body2" Text="@EnumHelpers.GetDescription(category)"></RadzenText>
                            </Template>
                        </RadzenDropDown>
                    </ChildContent>
                    <Helper>
                        <RadzenCompareValidator Operator="CompareOperator.NotEqual" Value="@NarrativePerspective.None" Component="Perspective" Text="Please select a Perspective" Popup="true" Style="position:absolute"></RadzenCompareValidator>
                    </Helper>
                </RadzenFormField>
                <div style="display:flex;flex-direction:column;justify-content:center;align-items:center">
                    <RadzenButton @ref="_button" Size="ButtonSize.ExtraSmall" Icon="add" Style="padding:0" Text="Add Genres" Variant="Variant.Text" Click="@(args => _popup.ToggleAsync(_formField.Element))" />
                    @if (AppState.NovelConcepts.Genre != GenreCategory.None)
                    {
                        <RadzenText TextStyle="TextStyle.Caption">@AppState.NovelConcepts.Genre.ToString() - @(string.Join(", ", AppState.NovelConcepts.SubGenres.Select(x => x.Name)))</RadzenText>
                    }
                </div>

                <RadzenButton Visible="@(AppState.NovelConcepts.Tone != NovelTone.None && AppState.NovelConcepts.Audience != NovelAudience.None)" Style="align-self:center" Size="ButtonSize.ExtraSmall" Icon="lightbulb" Text="Just Do It For Me!" Click="@(() => TryGenerateConcepts(AppState.NovelConcepts))"></RadzenButton>

            </div>
            <div style="display:grid;grid-template-columns:90% 10%">
                <RadzenFormField Style="width:100%" Text="Title">
                    <ChildContent>
                        <RadzenTextBox Name="Title" Style="width:100%" title="Right-click for AI to generate" @bind-Value="@AppState.NovelConcepts.Title" ContextMenu="@((args) => ShowContextMenuWithContent(args, "Title"))"></RadzenTextBox>
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Title"></RadzenRequiredValidator>
                    </Helper>
                </RadzenFormField>
                <RadzenButton Visible="@(AppState.NovelConcepts.Tone != NovelTone.None && AppState.NovelConcepts.Audience != NovelAudience.None)" Icon="lightbulb" Variant="Variant.Text" IconColor="green" title="Create a Title for me!" Click="@(() => GenerateItem("Title"))"></RadzenButton>
            </div>

            <div style="display:grid;grid-template-columns:90% 10%">
                <RadzenFormField Style="width:100%" Text="Topic or Theme">
                    <ChildContent>
                        <RadzenTextArea Name="Theme" Style="width:100%; height:3rem" @bind-Value="@AppState.NovelConcepts.Theme" ContextMenu="@((args) => ShowContextMenuWithContent(args, "Description"))"></RadzenTextArea>
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Theme"></RadzenRequiredValidator>
                    </Helper>
                </RadzenFormField>
                <RadzenButton Visible="@(AppState.NovelConcepts.Tone != NovelTone.None && AppState.NovelConcepts.Audience != NovelAudience.None)" Icon="lightbulb" Variant="Variant.Text" IconColor="green" title="Create a Description for me!" Click="@(() => GenerateItem("Description"))"></RadzenButton>
            </div>


            <div style="display:grid;grid-template-columns:90% 10%">
                <RadzenFormField Style="width:100%" Text="Characters (optional)">
                    <ChildContent>
                        <RadzenTextArea Style="width:100%; height:4rem" @bind-Value="@AppState.NovelConcepts.Characters" ContextMenu="@((args) => ShowContextMenuWithContent(args, "Characters"))"></RadzenTextArea>
                    </ChildContent>
                    <Helper>
                        <RadzenText TextStyle="TextStyle.Caption" Text="Provide character names and descriptions that you want included in the novel"></RadzenText>
                    </Helper>
                </RadzenFormField>
                <RadzenButton Visible="@(AppState.NovelConcepts.Tone != NovelTone.None && AppState.NovelConcepts.Audience != NovelAudience.None)" Icon="lightbulb" Variant="Variant.Text" IconColor="green" title="Create Characters for me!" Click="@(() => GenerateItem("Characters"))"></RadzenButton>
            </div>

            <div style="display:grid;grid-template-columns:90% 10%">
                <RadzenFormField Style="width:100%" Text="Plot Events (optional)">
                    <ChildContent>
                        <RadzenTextArea Style="width:100%; height:4rem" @bind-Value="@AppState.NovelConcepts.PlotEvents" ContextMenu="@((args) => ShowContextMenuWithContent(args, "PlotEvents"))"></RadzenTextArea>
                    </ChildContent>
                    <Helper>
                        <RadzenText TextStyle="TextStyle.Caption" Text="Provide plot events that you want included in the novel"></RadzenText>
                    </Helper>
                </RadzenFormField>
                <RadzenButton Visible="@(AppState.NovelConcepts.Tone != NovelTone.None && AppState.NovelConcepts.Audience != NovelAudience.None)" Icon="lightbulb" Variant="Variant.Text" IconColor="green" title="Create Plot Events for me!" Click="@(() => GenerateItem("PlotEvents"))"></RadzenButton>
            </div>

            <RadzenFormField Style="width:100%" Text="Additional Instructions (optional)">
                <ChildContent>
                    <RadzenTextArea Style="width:100%; height:3rem" @bind-Value="@AppState.NovelConcepts.AdditionalInstructions"></RadzenTextArea>
                </ChildContent>
                <Helper>
                    <RadzenText TextStyle="TextStyle.Caption" Text="Provide anthing else that you want included in the novel"></RadzenText>
                </Helper>
            </RadzenFormField>

            <div style="display:flex;flex-direction:row; gap:1rem">
                <RadzenFormField Text="Chapter Count">
                    <ChildContent>
                        <RadzenNumeric @bind-Value="AppState.NovelConcepts.ChapterCount" Step="1" Min="2" Max="25"></RadzenNumeric>
                    </ChildContent>
                    <Helper>
                        <RadzenText TextStyle="TextStyle.Caption" Text="Between 3 and 20 Chapters."></RadzenText>
                    </Helper>
                </RadzenFormField>
                <div style="flex-direction:column">
                    <ModelSelector @bind-SelectedModel="AppState.NovelConcepts.OutlineAIModel" />
                </div>
                <RadzenButton Style="align-self:center" ButtonType="ButtonType.Submit" Text="Create Outline" BusyText="Generating Outline..." IsBusy="IsBusy"></RadzenButton>
            </div>


        </RadzenTemplateForm>
    </RadzenColumn>
</RadzenRow>
@code
{
    void ShowContextMenuWithContent(MouseEventArgs args, string section) => ContextMenuService.Open(args, ds =>
    @<RadzenButton Size="ButtonSize.ExtraSmall" Variant="Variant.Text" Visible="@(AppState.NovelConcepts.Tone != NovelTone.None && AppState.NovelConcepts.Audience != NovelAudience.None)" Icon="prompt_suggestion" Text="@($"Generate {section}")" Click="@(() => GenerateItem(section))"></RadzenButton>);
}
