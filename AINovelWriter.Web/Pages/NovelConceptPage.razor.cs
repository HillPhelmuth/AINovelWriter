using System.Runtime.CompilerServices;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using AINovelWriter.Shared.Models;
using AINovelWriter.Shared.Services;
using Microsoft.AspNetCore.Components;
using Radzen.Blazor;
using Radzen.Blazor.Rendering;
using static AINovelWriter.Shared.Models.EnumHelpers;
using static AINovelWriter.Web.Pages.EditNovel;

namespace AINovelWriter.Web.Pages;

public partial class NovelConceptPage
{
    private class NovelIdeaForm
    {
        public NovelLength NovelLength { get; set; }
        public GenreCategoryItem? NovelCategory { get; set; }
        public List<Genre> SubGenres { get; set; } = [];
    }
    private NovelIdeaForm _novelIdeaForm = new();
    private bool _isBusy;
    private bool _showOutline;
    RadzenButton _button;
    Popup _popup;
    //private RadzenDropDown<AIModel> _aiModelField;
    private static Dictionary<AIModel, string> AIModelDescriptions => GetEnumsWithDescriptions<AIModel>().ToDictionary(x => x.Key, y => y.Value);

    private bool _isDebug;
    protected override Task OnInitializedAsync()
    {
#if DEBUG
        _isDebug = true;
#endif
        return base.OnInitializedAsync();
    }

    private CancellationTokenSource _cancellationTokenSource = new();
    private async Task SubmitIdea(NovelIdeaForm novelIdea)
    {
        _isBusy = true;
        StateHasChanged();

        await _popup.CloseAsync();
        await TryGenerateConcepts(novelIdea);
        _isBusy = false;
        StateHasChanged();
    }
    private int _attempts = 0;
    private int _storiesCount = 5;
    private bool _tempHide;
    private string _tempBusyText = "generating...";
    private List<NovelInfo> _autoGeneratedNovels = [];

    //private async Task GenerateMultipleFineTuneStories(int count)
    //{
    //    _isBusy = true;
    //    for (int i = 0; i < count; i++)
    //    {
    //        try
    //        {
    //            await GenerateModifiedNovelsForFineTune();
    //        }
    //        catch (Exception e)
    //        {
    //            Console.WriteLine(e);
    //            continue;
    //        }

            
    //    }
    //    _isBusy = false;
    //}

    private async void UpdateTempText(string text)
    {
        _tempBusyText = text;
        StateHasChanged();
        await Task.Delay(1);
    }
    //private async Task GenerateModifiedNovelsForFineTune()
    //{
    //    var random = new Random();
    //    var idea = new NovelIdeaForm();
    //    var genreCategoryItems = GenreConverter.ToCategoryItems();
    //    var category = genreCategoryItems[random.Next(genreCategoryItems.Count)];
    //    idea.NovelCategory = category;
    //    var subGenres = category.Genres;
    //    var singleSubGenre = subGenres[random.Next(subGenres.Count)];
    //    idea.SubGenres = [singleSubGenre];
    //    _isBusy = true;
    //    StateHasChanged();
    //    UpdateTempText("Running TryGenerateConcepts");
    //    await TryGenerateConcepts(idea);
    //    AppState.NovelConcepts.OutlineAIModel = AIModel.GeminiFlash;
    //    AppState.NovelConcepts.ChapterCount = 5;
    //    UpdateTempText("Running CreateOutline");
    //    await CreateOutline(AppState.NovelConcepts);
    //    UpdateTempText("Running GenerateNovel");
    //    await GenerateNovel(AppState.NovelOutline);
    //    UpdateTempText("Running GenerateNovelAsync");
    //    await GenerateNovelAsync();
    //    var novelInfoTitle = AppState.NovelInfo.Title;
    //    await File.WriteAllTextAsync($"{novelInfoTitle}_genOnly.json",
    //        JsonSerializer.Serialize(AppState.NovelInfo, new JsonSerializerOptions() { WriteIndented = true }));
    //    foreach (var chapter in AppState.NovelInfo.ChapterOutlines)
    //    {
    //        var form = new EditNovelForm() { ChapterOutline = chapter, AIModel = AIModel.Gpt4Mini };
    //        var chapterNum = AppState.NovelInfo.ChapterOutlines.IndexOf(chapter) + 1;
    //        UpdateTempText($"Running GetFeedback - Ch {chapterNum}");
    //        await GetFeedback(form);
    //        UpdateTempText($"Running ApplySuggestions - Ch {chapterNum}");
    //        await ApplySuggestions(_applySuggestionForm);
    //        UpdateTempText($"Running ApplyRewrite - Ch {chapterNum}");
    //        ApplyRewrite();
    //    }


    //    StateHasChanged();

    //    //await File.WriteAllTextAsync($"{novelInfoTitle}_genAndEdit.json",
    //    //    JsonSerializer.Serialize(AppState.NovelInfo, new JsonSerializerOptions() {WriteIndented = true}));
    //    _autoGeneratedNovels.Add(AppState.NovelInfo);
    //    await File.WriteAllTextAsync("autoGeneratedNovels.json",
    //        JsonSerializer.Serialize(_autoGeneratedNovels, new JsonSerializerOptions() { WriteIndented = true }));
    //    AppState.NovelInfo = new NovelInfo();
    //    AppState.NovelOutline = new NovelOutline();
    //    AppState.NovelConcepts = new NovelConcepts();

    //    Console.WriteLine($"Finished generating and editing {novelInfoTitle}");

    //}
    // Step 1
    private async Task TryGenerateConcepts(NovelIdeaForm novelIdea)
    {
        try
        {
            AppState.NovelConcepts = await NovelWriterService.GenerateNovelIdea(novelIdea.NovelCategory!, novelIdea.SubGenres, novelIdea.NovelLength);
            AppState.NovelConcepts.Genre = novelIdea.NovelCategory!.Category;
            StateHasChanged();

        }
        catch (Exception e)
        {
            _attempts++;
            if (_attempts < 5)
            {
                await TryGenerateConcepts(novelIdea);
                return;
            }
        }
        _attempts = 0;
    }
    // Step 2
    public async Task CreateOutline(NovelConcepts novelConcepts)
    {
        _isBusy = true;
        StateHasChanged();
        await Task.Delay(1);
        AppState.NovelInfo = new NovelInfo() { User = AppState.UserData.UserName };
        var theme = $"Genre:\n{novelConcepts.Genre.ToString() + "\n" + novelConcepts.Genre.GetDescription()}\n\n{(novelConcepts.SubGenres.Count > 0 ? "Subgenres:\n" + string.Join("\n", novelConcepts.SubGenres.Select(x => x.ToString())) : string.Empty)}\nTheme/Description: {novelConcepts.Theme}";
        AppState.NovelOutline.Outline = await NovelWriterService.CreateNovelOutline(theme, novelConcepts.Characters, novelConcepts.PlotEvents, novelConcepts.Title, novelConcepts.ChapterCount, novelConcepts.OutlineAIModel);
        AppState.NovelInfo.Outline = AppState.NovelOutline.Outline;
        AppState.NovelInfo.Title = novelConcepts.Title;
        AppState.NovelInfo.ConceptDescription = novelConcepts.ToString();
        //AppState.NovelInfo.AuthorStyle = novelConcepts.AuthorStyle;
        if (!_tempHide)
            _isBusy = false;
        _showOutline = true;
        //await _aiModelField.Element.FocusAsync();
        StateHasChanged();
    }
    // Step 3
    private async Task GenerateNovel(NovelOutline novelWriter)
    {
        _isBusy = true;

        StateHasChanged();
        var ctoken = _cancellationTokenSource.Token;
        AppState.NovelOutline = novelWriter;
        AppState.WriterModel = novelWriter.WriterAIModel;
        AppState.NovelInfo.Text = "";
        if (!_tempHide)
            NavigationManager.NavigateTo("stream");
        await Task.Delay(1);

        //_isBusy = false;
        StateHasChanged();
    }

    #region Local Fine-tuning Section

    
    // Step 4 (From NovelStreamingPage.razor.cs)
    public async Task GenerateNovelAsync()
    {
        if (string.IsNullOrEmpty(AppState.NovelOutline.Outline)) return;
        AppState.NovelInfo.Text = "";
        _isBusy = true;
        StateHasChanged();
        var ctoken = _cancellationTokenSource.Token;
        await foreach (var token in NovelWriterService.WriteNovel(AppState.NovelOutline.Outline!, AppState.NovelInfo.AuthorStyle ?? "", AIModel.Gpt4MiniFineTuned, ctoken))
        {
            AppState.NovelInfo.Text += token;
            await InvokeAsync(StateHasChanged);
        }
        AppState.NovelInfo.IsComplete = true;
        //_isBusy = false;
        //_buttonClass = "blink_me";
        StateHasChanged();

    }

    // Step 5 Loop through chapters for rewrite
    private string _originalText = "";
    private ApplySuggestionForm _applySuggestionForm = new() { AIModel = AIModel.Gpt4OChatGptLatest };
    // Step 5.1 Feedback (From EditNovel.razor.cs) 
    public async Task GetFeedback(EditNovelForm form)
    {
        _isBusy = true;
        StateHasChanged();
        await Task.Delay(1);
        var text = form.ChapterOutline?.FullText;
        _originalText = text;
        var feedback = await NovelWriterService.ProvideRewriteFeedback(form.ChapterOutline, form.AIModel, form.Notes);
        _applySuggestionForm.Feedback = feedback;
        _applySuggestionForm.ChapterOutline = form.ChapterOutline;
        //_isBusy = false;
        StateHasChanged();
    }
    private string _rewrite = "";
    private bool _isRewriting;

    // Step 5.2 Apply Feedback Suggestions
    public async Task ApplySuggestions(ApplySuggestionForm form)
    {
        _isRewriting = true;
        StateHasChanged();
        await Task.Delay(1);
        var chapterRewrite = await NovelWriterService.RewriteChapter(form.ChapterOutline!, form.Feedback!, form.AIModel);
        _rewrite = chapterRewrite;
        _isRewriting = false;
        StateHasChanged();
    }
    // Step 5.3 Apply Rewrite
    private void ApplyRewrite()
    {
        AppState.NovelInfo.ChapterOutlines.First(x => x.Title == _applySuggestionForm.ChapterOutline!.Title).FullText = _rewrite;

        AppState.NovelInfo.Text = string.Join("\n\n", AppState.NovelInfo.ChapterOutlines.Select(x => x.FullText));
        AppState.NovelInfo.TextPages.Clear();
    }
	// Step 6 Convert to JsonL format for fine-tuning
	//private async Task AutomateFineTuneData()
	//{
	//    _isBusy = true;
	//    StateHasChanged();
	//    await Task.Delay(1);
	//    var refinedPath = @"autoGeneratedNovels.json";

	//    var refinedJson = await File.ReadAllTextAsync(refinedPath);

	//    var refinedNovels = JsonSerializer.Deserialize<RefinedNovels>(refinedJson);

	//    var sb = new StringBuilder();
	//    await foreach (var line in FineTuneService.GetFineTuneLines(refinedNovels.Novels))
	//    {
	//        var lineJson = JsonSerializer.Serialize(line);
	//        sb.AppendLine(lineJson);
	//    }
	//    await File.WriteAllTextAsync("FineTuneData_Fixed.jsonl", sb.ToString());
	//    _isBusy = false;
	//    StateHasChanged();

	//}
	//private class RefinedNovels
	//{
	//    [JsonPropertyName("NovelInfos")]
	//    public List<NovelInfo> Novels { get; set; } = [];
	//}
	#endregion
}
