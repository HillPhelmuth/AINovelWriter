using System.Runtime.CompilerServices;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using AINovelWriter.Shared.Models;
using AINovelWriter.Shared.Models.Enums;
using AINovelWriter.Shared.Services;
using Microsoft.AspNetCore.Components;
using Radzen.Blazor;
using Radzen.Blazor.Rendering;
using static AINovelWriter.Shared.Models.EnumHelpers;
using static AINovelWriter.Web.Pages.EditNovel;
using NovelWriterServiceStatic = AINovelWriter.Shared.Services.NovelWriterService;

namespace AINovelWriter.Web.Pages;

public partial class NovelConceptPage
{
    private class NovelIdeaForm
    {
        public NovelLength NovelLength { get; set; }
        public GenreCategoryItem? NovelCategory { get; set; }
        public List<Genre> SubGenres { get; set; } = [];
    }
    private NovelIdeaForm _novelIdeaForm = new();
    
    private bool _showOutline;
    RadzenButton _button;
    RadzenFormField _formField;
    Popup _popup;
    //private RadzenDropDown<AIModel> _aiModelField;

    private bool _isDebug;
    protected override Task OnInitializedAsync()
    {
#if DEBUG
        _isDebug = true;
#endif
        return base.OnInitializedAsync();
    }

    private CancellationTokenSource _cancellationTokenSource = new();
    private async Task SubmitIdea(NovelIdeaForm novelIdea)
    {
        
        AppState.NovelConcepts.SubGenres = novelIdea.SubGenres;
        AppState.NovelConcepts.Genre = novelIdea.NovelCategory!.Category;
        await _popup.CloseAsync();
        //await TryGenerateConcepts(novelIdea);
        IsBusy = false;
        StateHasChanged();
    }
    private int _attempts = 0;
    private int _storiesCount = 5;
    private bool _tempHide;
    private string _tempBusyText = "generating...";
    private List<NovelInfo> _autoGeneratedNovels = [];
    private string _busyText = "Generating novel concepts...";

    private async Task TryGenerateConcepts(NovelConcepts novelIdea)
    {
        IsBusy = true;
        StateHasChanged();
        try
        {
            var newConcepts = await NovelWriterService.GenerateNovelIdea(novelIdea.Genre!, novelIdea.SubGenres, novelIdea.Length, novelIdea.Tone, novelIdea.Audience);
            AppState.NovelConcepts.Title = newConcepts.Title;
            AppState.NovelConcepts.Theme = newConcepts.Theme;
            AppState.NovelConcepts.Characters = newConcepts.Characters;
            AppState.NovelConcepts.PlotEvents = newConcepts.PlotEvents;
            //AppState.NovelConcepts.Genre = novelIdea.NovelCategory!.Category;
            //AppState.NovelConcepts.Length = novelIdea.NovelLength;
            StateHasChanged();

        }
        catch (Exception e)
        {
            _attempts++;
            if (_attempts < 5)
            {
                await TryGenerateConcepts(novelIdea);
                return;
            }
        }
        IsBusy = false;
        StateHasChanged();
        _attempts = 0;
    }

    private async Task GenerateItem(string item)
    {
        switch (item)
        {
            case "Title":
                await GenerateTitle();
                break;
            case "Description":
                await GenerateDescription();
                break;
            case "Characters":
                await GenerateCharacters();
                break;
            case "PlotEvents":
                await GeneratePlotEvents();
                break;
            default:
                throw new ArgumentException($"Unknown item: {item}");
        }
        ContextMenuService.Close();
    }
    private async Task GenerateTitle()
    {
        _busyText = "Thinking of a title...";
        IsBusy = true;
        StateHasChanged();
        await Task.Delay(1);
        AppState.NovelConcepts.Title = await NovelWriterService.GenerateNovelTitle(AppState.NovelConcepts);
        IsBusy = false;
        StateHasChanged();
    }
    private async Task GenerateDescription()
    {
        _busyText = "Thinking of a description...";
        IsBusy = true;
        StateHasChanged();
        await Task.Delay(1);
        AppState.NovelConcepts.Theme = await NovelWriterService.GenerateNovelDescription(AppState.NovelConcepts);
        IsBusy = false;
        StateHasChanged();
    }
    private async Task GenerateCharacters()
    {
        _busyText = "Thinking of characters...";
        IsBusy = true;
        StateHasChanged();
        await Task.Delay(1);
        AppState.NovelConcepts.Characters = await NovelWriterService.GenerateNovelCharacters(AppState.NovelConcepts);
        IsBusy = false;
        StateHasChanged();
    }
    private async Task GeneratePlotEvents()
    {
        _busyText = "Thinking of plot events...";
        IsBusy = true;
        StateHasChanged();
        await Task.Delay(1);
        AppState.NovelConcepts.PlotEvents = await NovelWriterService.GenerateNovelPlotEvents(AppState.NovelConcepts);
        IsBusy = false;
        StateHasChanged();
    }
    // Step 2
    public async Task CreateOutline(NovelConcepts novelConcepts)
    {
        _busyText = "Creating outline...";
        IsBusy = true;
        StateHasChanged();
        await Task.Delay(1);
        AppState.NovelInfo = new NovelInfo() { User = AppState.UserData.UserName };
        //novelConcepts.Theme = $"Genre:\n{novelConcepts.Genre.ToString() + "\n" + novelConcepts.Genre.GetDescription()}\n\n{(novelConcepts.SubGenres.Count > 0 ? "Subgenres:\n" + string.Join("\n", novelConcepts.SubGenres.Select(x => x.ToString())) : string.Empty)}\nTheme/Description: {novelConcepts.Theme}";
        AppState.NovelOutline.Outline = await NovelWriterService.CreateNovelOutline(novelConcepts);
        AppState.NovelInfo.Outline = AppState.NovelOutline.Outline;
        AppState.NovelInfo.Title = novelConcepts.Title;
        AppState.NovelInfo.ConceptDescription = novelConcepts.ToString();
        AppState.NovelInfo.Concepts = novelConcepts;
        var chapterOutlineLines = NovelWriterServiceStatic.SplitMarkdownByHeaders(AppState.NovelOutline.Outline);
        HandleChapterOutline(JsonSerializer.Serialize(chapterOutlineLines));
        //AppState.NovelInfo.AuthorStyle = novelConcepts.AuthorStyle;
        if (!_tempHide)
            IsBusy = false;
        _showOutline = true;
        NavigationManager.NavigateTo("outline");
        StateHasChanged();
    }
    // Step 3
    

}
